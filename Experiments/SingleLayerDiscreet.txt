# Implement single layer discrete perceptron

import numpy as np

inputs = np.array([
    [1,-2,0,-1],
    [0,1.5,-0.5,-1],
    [-1,1,0.5,-1]
])

desired = np.array([-1,-1,1])
weights = np.array([1,-1,0,0.5])

c = 0.1
epochs = 100

def activation(x):
  return 1 if x>=0 else -1

for epoch in range(epochs):
  for i in range(len(inputs)):
    input_vector = inputs[i]

    o = np.dot(input_vector,weights)
    net = activation(o)

    if desired[i]!= net:
      weights += c*(desired[i]-net)*input_vector

print(weights)

def test_perceptron(weights,inputs):
  outputs = []
  for input_vector in inputs:
    o = np.dot(input_vector,weights)
    net = activation(o)
    outputs.append(net)
  return outputs

test_outputs = test_perceptron(weights,inputs)

print(desired)
print(test_outputs)